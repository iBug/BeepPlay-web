{"version":3,"sources":["components/OpenFile.js","components/Player.js","App.js","reportWebVitals.js","index.js"],"names":["LoadFile","props","state","filename","reader","FileReader","onload","e","a","text","target","result","sheet","parseSheet","onChangeFile","console","log","err","error","readAsText","this","lines","split","notes","line","trim","startsWith","bpm","pitch","octave","tempo","level","parseInt","push","parseFloat","offset","className","htmlFor","type","name","onChange","setState","files","onClick","loadFile","Component","Player","gain","audioContext","window","AudioContext","webkitAudioContext","gainNode","createGain","setGain","oscillator","stop","noteIndex","playNextNote","length","note","playNote","toFrequency","toDuration","frequency","duration","callback","audioCtx","createOscillator","value","connect","destination","onended","start","currentTime","relativeLevel","Math","pow","playMelody","id","min","max","step","App","bind","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2479c0a9.chunk.js","sourcesContent":["import { Component } from \"react\";\n\nexport default class LoadFile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { filename: null };\n  }\n\n  loadFile() {\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const text = e.target.result;\n      try {\n        const sheet = this.parseSheet(text);\n        this.props.onChangeFile(sheet);\n        console.log(\"Loaded sheet:\", sheet);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    reader.readAsText(this.state.filename, \"utf-8\");\n  }\n\n  parseSheet(text) {\n    const lines = text.split(\"\\n\");\n    const sheet = { notes: [] };\n    for (let line of lines) {\n      line = line.trim();\n      if (line === \"\" || line.startsWith(\"#\")) {\n        continue;\n      }\n      if (!sheet.bpm) {\n        // eslint-disable-next-line\n        const [bpm, offset, ...other] = line.split(/\\s+/);\n        sheet.bpm = parseFloat(bpm);\n        sheet.offset = parseFloat(offset);\n        continue;\n      }\n      const [pitch, octave, tempo] = line.split(/\\s+/);\n      const level = parseInt(pitch) + parseInt(octave) * 12;\n      sheet.notes.push({ level: level, tempo: parseFloat(tempo) });\n    }\n    return sheet;\n  }\n\n  render() {\n    return (\n      <div className=\"LoadFile\">\n        <label htmlFor=\"file\"></label>\n        <input type=\"file\" name=\"file\" onChange={(e) => this.setState({ filename: e.target.files[0] })}></input>\n        <button className=\"btn btn-primary\" onClick={() => this.loadFile()}>Load</button>\n      </div>\n    );\n  }\n}\n","import { Component } from \"react\";\n\nexport default class Player extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gain: 0,\n    };\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    this.gainNode = this.audioContext.createGain();\n    this.sheet = this.props.sheet;\n  }\n\n  componentDidMount() {\n    this.setGain(0.5);\n  }\n\n  componentDidUpdate() {\n    this.sheet = this.props.sheet;\n  }\n\n  playMelody() {\n    if (this.oscillator) {\n      this.stop();\n    }\n\n    this.noteIndex = -1;\n    this.playNextNote();\n  }\n\n  playNextNote() {\n    this.noteIndex++;\n    if (this.noteIndex >= this.sheet.notes.length) {\n      this.stop();\n    } else {\n      const note = this.sheet.notes[this.noteIndex];\n      this.playNote(\n        this.toFrequency(note.level + this.sheet.offset),\n        this.toDuration(note.tempo, this.sheet.bpm),\n        () => this.playNextNote()\n      );\n    }\n  }\n\n  playNote(frequency, duration, callback) {\n    const audioCtx = this.audioContext;\n    const oscillator = audioCtx.createOscillator();\n    this.oscillator = oscillator;\n\n    oscillator.type = \"sine\";\n    oscillator.frequency.value = frequency;\n    oscillator.connect(this.gainNode).connect(audioCtx.destination);\n    oscillator.onended = callback;\n    oscillator.start();\n    oscillator.stop(audioCtx.currentTime + duration);\n  }\n\n  setGain(gain) {\n    this.setState({ gain: gain });\n    this.gainNode.gain.value = gain;\n  }\n\n  stop() {\n    if (!this.oscillator) {\n      return;\n    }\n    this.oscillator.onended = null;\n    this.oscillator.stop();\n    this.oscillator = null;\n  }\n\n  toFrequency(level) {\n    if (level === 0) {\n      return 0;\n    }\n    const referenceFrequency = 440; // A4\n    const referenceNote = 57; // A4 = 9 + 4 * 12\n    const relativeLevel = level - referenceNote;\n    const frequency = Math.pow(2, relativeLevel / 12) * referenceFrequency;\n    return frequency;\n  }\n\n  toDuration(tempo, bpm) {\n    return (tempo * 60) / (bpm * 16);\n  }\n\n  render() {\n    return (\n      <div className=\"player\">\n        <button className=\"btn btn-primary\" onClick={() => this.playMelody()}>Play</button>\n        <button className=\"btn btn-danger\" onClick={() => this.stop()}>Stop</button>\n        <input\n          type=\"range\"\n          id=\"volume\"\n          onChange={(e) => {\n            this.setGain(e.target.value);\n          }}\n          value={this.state.gain}\n          min={0}\n          max={2}\n          step={0.01}\n        />\n      </div>\n    );\n  }\n}\n","import { Component } from \"react\";\nimport \"./App.scss\";\nimport OpenFile from \"./components/OpenFile\";\nimport Player from \"./components/Player\";\n\nexport default class App extends Component {\n  state = {\n    sheet: null,\n  };\n\n  onChangeFile(sheet) {\n    this.setState({ sheet: sheet });\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <main className=\"card mb-3\">\n          <div className=\"card-body\">\n            <OpenFile onChangeFile={this.onChangeFile.bind(this)} />\n            <Player sheet={this.state.sheet} />\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}